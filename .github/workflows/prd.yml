name: Deploy to K8S PRD Cluster

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  APP_NAME: payment-api
  AWS_REGION: us-east-2
  NAMESPACE: jfl-novo-app

jobs:
  prepare:
    name: Docker Push Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag name ref
        id: github-tag
        run: |
          echo "${GITHUB_REF##*/}" &&
          echo "::set-output name=tagname::${GITHUB_REF##*/}.${GITHUB_RUN_NUMBER}"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.APP_NAME }}
          ECR_FOLDER: prd
          IMAGE_TAG: ${{ steps.github-tag.outputs.tagname }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to K8S.
          docker build -t $ECR_REGISTRY/$ECR_FOLDER/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_FOLDER/$ECR_REPOSITORY:$IMAGE_TAG
          echo "$ECR_REGISTRY/$ECR_FOLDER/$ECR_REPOSITORY:$IMAGE_TAG" > registry.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@master
        with:
          name: docker-registry
          path: ./registry.txt

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: docker-registry

      - name: Extract Docker Registry
        id: docker-registry
        shell: bash
        run: |
          value=`cat registry.txt`
          echo "::set-output name=image::$value"

      - name: Create namespace if not exist
        uses: steebchen/kubectl@v2.0.0
        with:
          version: v1.22.2
          config: ${{ secrets.KUBECONFIG_64 }}
          command: create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Fill in the new image ID in the K8S Cluster task definition
        uses: "deliverybot/helm@v1"
        with:
          helm: helm3
          release: "${{ env.APP_NAME }}"
          namespace: ${{ env.NAMESPACE }}
          chart: "./kubernetes/prd"
          token: "${{ github.token }}"
          version: "${{ github.sha }}"
          value-files: "./kubernetes/values.yaml"
          values: |
            DOCKER_REGISTRY: ${{ steps.docker-registry.outputs.image }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            DB_DRIVE: ${{ secrets.RDS_HML_DRIVE }}
            DB_HOST: ${{ secrets.RDS_HOST }}
            DB_USER: ${{ secrets.RDS_HML_USER }}
            DB_PASSWORD: ${{ secrets.RDS_PASSWORD }}
            DB_DATABASE: ${{ secrets.RDS_HML_DATABASE }}
            DB_PORT: ${{ secrets.RDS_HML_PORT }}
            DB_LOG: true
            DB_SYNC: false
        env:
          KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
